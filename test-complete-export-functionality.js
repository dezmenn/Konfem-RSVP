const axios = require('axios');
const fs = require('fs');

async function testCompleteExportFunctionality() {
  console.log('üß™ Testing Complete Export Functionality...\n');
  
  try {
    // Test 1: Seating Chart Excel Export with Visual Layout
    console.log('üìä Test 1: Seating Chart Excel Export with Visual Layout...');
    const seatingExcelResponse = await axios.post('http://localhost:5000/api/exports/seating-chart', {
      eventId: 'demo-event',
      format: 'xlsx',
      includeVenueLayout: true,
      includeTableAssignments: true,
      includeGuestDetails: false
    }, {
      responseType: 'arraybuffer'
    });

    if (seatingExcelResponse.status === 200) {
      const filename = `test-complete-export-${Date.now()}.xlsx`;
      fs.writeFileSync(filename, seatingExcelResponse.data);
      console.log(`‚úÖ Seating Chart Excel: ${filename}`);
      console.log('   Should contain: Event Summary, Table Assignments, Table Summary, Visual Layout, Venue Elements');
    }

    // Test 2: Venue Layout Excel Export with Visual Layout
    console.log('\nüìä Test 2: Venue Layout Excel Export with Visual Layout...');
    const venueExcelResponse = await axios.post('http://localhost:5000/api/exports/venue-layout', {
      eventId: 'demo-event',
      format: 'xlsx'
    }, {
      responseType: 'arraybuffer'
    });

    if (venueExcelResponse.status === 200) {
      const filename = `test-complete-export-${Date.now()}.xlsx`;
      fs.writeFileSync(filename, venueExcelResponse.data);
      console.log(`‚úÖ Venue Layout Excel: ${filename}`);
      console.log('   Should contain: Event Info, Table Layout, Venue Elements, Visual Layout, Statistics');
    }

    // Test 3: PDF Export with Fixed Layout
    console.log('\nüìÑ Test 3: PDF Export with Fixed Layout...');
    const pdfResponse = await axios.post('http://localhost:5000/api/exports/seating-chart', {
      eventId: 'demo-event',
      format: 'pdf',
      includeVenueLayout: true,
      includeTableAssignments: true,
      includeGuestDetails: true
    }, {
      responseType: 'arraybuffer'
    });

    if (pdfResponse.status === 200) {
      const filename = `test-complete-export-${Date.now()}.pdf`;
      fs.writeFileSync(filename, pdfResponse.data);
      console.log(`‚úÖ Complete PDF: ${filename}`);
      console.log('   Should have: Fixed title, proper spacing, centered text, positioned legend');
    }

    // Test 4: CSV Export
    console.log('\nüìÑ Test 4: CSV Export...');
    const csvResponse = await axios.post('http://localhost:5000/api/exports/seating-chart', {
      eventId: 'demo-event',
      format: 'csv',
      includeTableAssignments: true
    }, {
      responseType: 'arraybuffer'
    });

    if (csvResponse.status === 200) {
      const filename = `test-complete-export-${Date.now()}.csv`;
      fs.writeFileSync(filename, csvResponse.data);
      console.log(`‚úÖ CSV Export: ${filename}`);
      console.log('   Should contain: Table assignments with statistics');
    }

    // Test 5: Guest List Export
    console.log('\nüìä Test 5: Guest List Excel Export...');
    const guestListResponse = await axios.post('http://localhost:5000/api/exports/guest-list', {
      eventId: 'demo-event',
      format: 'xlsx'
    }, {
      responseType: 'arraybuffer'
    });

    if (guestListResponse.status === 200) {
      const filename = `test-guest-list-${Date.now()}.xlsx`;
      fs.writeFileSync(filename, guestListResponse.data);
      console.log(`‚úÖ Guest List Excel: ${filename}`);
      console.log('   Should contain: Complete guest information with table assignments');
    }

    console.log('\nüéâ All export functionality tests completed successfully!');
    console.log('\nüìã Export Features Summary:');
    console.log('   ‚úì PDF Exports:');
    console.log('     ‚Ä¢ Fixed title truncation ("Seating Chart" displays completely)');
    console.log('     ‚Ä¢ Improved spacing and positioning');
    console.log('     ‚Ä¢ Enhanced venue element text centering');
    console.log('     ‚Ä¢ Better table text scaling');
    console.log('     ‚Ä¢ Smart legend positioning');
    console.log('     ‚Ä¢ Portrait/landscape optimization');
    console.log('   ‚úì Excel Exports:');
    console.log('     ‚Ä¢ Visual Layout sheet with emoji-based venue visualization');
    console.log('     ‚Ä¢ 30x30 grid representation');
    console.log('     ‚Ä¢ Automatic scaling to fit venue bounds');
    console.log('     ‚Ä¢ Legend with symbol explanations');
    console.log('     ‚Ä¢ Table details below visual grid');
    console.log('     ‚Ä¢ Multiple data sheets (Summary, Assignments, Layout, Elements)');
    console.log('   ‚úì CSV Exports:');
    console.log('     ‚Ä¢ Complete table and guest data');
    console.log('     ‚Ä¢ Statistics included');
    console.log('   ‚úì Format Support:');
    console.log('     ‚Ä¢ .xlsx (not .excel)');
    console.log('     ‚Ä¢ .pdf with proper layout');
    console.log('     ‚Ä¢ .csv with UTF-8 encoding');

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
  }
}

// Run the test
testCompleteExportFunctionality();